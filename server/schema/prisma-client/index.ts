// Code generated by Prisma (prisma@1.25.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  attribute: (where?: AttributeWhereInput) => Promise<boolean>;
  attributeValue: (where?: AttributeValueWhereInput) => Promise<boolean>;
  entry: (where?: EntryWhereInput) => Promise<boolean>;
  entryAttributeValue: (
    where?: EntryAttributeValueWhereInput
  ) => Promise<boolean>;
  entryRelationType: (where?: EntryRelationTypeWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  relatedEntry: (where?: RelatedEntryWhereInput) => Promise<boolean>;
  scope: (where?: ScopeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attribute: (where: AttributeWhereUniqueInput) => AttributePromise;
  attributes: (args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attribute>;
  attributesConnection: (args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttributeConnectionPromise;
  attributeValue: (
    where: AttributeValueWhereUniqueInput
  ) => AttributeValuePromise;
  attributeValues: (args?: {
    where?: AttributeValueWhereInput;
    orderBy?: AttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AttributeValue>;
  attributeValuesConnection: (args?: {
    where?: AttributeValueWhereInput;
    orderBy?: AttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttributeValueConnectionPromise;
  entry: (where: EntryWhereUniqueInput) => EntryPromise;
  entries: (args?: {
    where?: EntryWhereInput;
    orderBy?: EntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Entry>;
  entriesConnection: (args?: {
    where?: EntryWhereInput;
    orderBy?: EntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EntryConnectionPromise;
  entryAttributeValue: (
    where: EntryAttributeValueWhereUniqueInput
  ) => EntryAttributeValuePromise;
  entryAttributeValues: (args?: {
    where?: EntryAttributeValueWhereInput;
    orderBy?: EntryAttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EntryAttributeValue>;
  entryAttributeValuesConnection: (args?: {
    where?: EntryAttributeValueWhereInput;
    orderBy?: EntryAttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EntryAttributeValueConnectionPromise;
  entryRelationType: (
    where: EntryRelationTypeWhereUniqueInput
  ) => EntryRelationTypePromise;
  entryRelationTypes: (args?: {
    where?: EntryRelationTypeWhereInput;
    orderBy?: EntryRelationTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EntryRelationType>;
  entryRelationTypesConnection: (args?: {
    where?: EntryRelationTypeWhereInput;
    orderBy?: EntryRelationTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EntryRelationTypeConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  relatedEntry: (where: RelatedEntryWhereUniqueInput) => RelatedEntryPromise;
  relatedEntries: (args?: {
    where?: RelatedEntryWhereInput;
    orderBy?: RelatedEntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RelatedEntry>;
  relatedEntriesConnection: (args?: {
    where?: RelatedEntryWhereInput;
    orderBy?: RelatedEntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RelatedEntryConnectionPromise;
  scope: (where: ScopeWhereUniqueInput) => ScopePromise;
  scopes: (args?: {
    where?: ScopeWhereInput;
    orderBy?: ScopeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Scope>;
  scopesConnection: (args?: {
    where?: ScopeWhereInput;
    orderBy?: ScopeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScopeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttribute: (data: AttributeCreateInput) => AttributePromise;
  updateAttribute: (args: {
    data: AttributeUpdateInput;
    where: AttributeWhereUniqueInput;
  }) => AttributePromise;
  updateManyAttributes: (args: {
    data: AttributeUpdateManyMutationInput;
    where?: AttributeWhereInput;
  }) => BatchPayloadPromise;
  upsertAttribute: (args: {
    where: AttributeWhereUniqueInput;
    create: AttributeCreateInput;
    update: AttributeUpdateInput;
  }) => AttributePromise;
  deleteAttribute: (where: AttributeWhereUniqueInput) => AttributePromise;
  deleteManyAttributes: (where?: AttributeWhereInput) => BatchPayloadPromise;
  createAttributeValue: (
    data: AttributeValueCreateInput
  ) => AttributeValuePromise;
  updateAttributeValue: (args: {
    data: AttributeValueUpdateInput;
    where: AttributeValueWhereUniqueInput;
  }) => AttributeValuePromise;
  updateManyAttributeValues: (args: {
    data: AttributeValueUpdateManyMutationInput;
    where?: AttributeValueWhereInput;
  }) => BatchPayloadPromise;
  upsertAttributeValue: (args: {
    where: AttributeValueWhereUniqueInput;
    create: AttributeValueCreateInput;
    update: AttributeValueUpdateInput;
  }) => AttributeValuePromise;
  deleteAttributeValue: (
    where: AttributeValueWhereUniqueInput
  ) => AttributeValuePromise;
  deleteManyAttributeValues: (
    where?: AttributeValueWhereInput
  ) => BatchPayloadPromise;
  createEntry: (data: EntryCreateInput) => EntryPromise;
  updateEntry: (args: {
    data: EntryUpdateInput;
    where: EntryWhereUniqueInput;
  }) => EntryPromise;
  updateManyEntries: (args: {
    data: EntryUpdateManyMutationInput;
    where?: EntryWhereInput;
  }) => BatchPayloadPromise;
  upsertEntry: (args: {
    where: EntryWhereUniqueInput;
    create: EntryCreateInput;
    update: EntryUpdateInput;
  }) => EntryPromise;
  deleteEntry: (where: EntryWhereUniqueInput) => EntryPromise;
  deleteManyEntries: (where?: EntryWhereInput) => BatchPayloadPromise;
  createEntryAttributeValue: (
    data: EntryAttributeValueCreateInput
  ) => EntryAttributeValuePromise;
  updateEntryAttributeValue: (args: {
    data: EntryAttributeValueUpdateInput;
    where: EntryAttributeValueWhereUniqueInput;
  }) => EntryAttributeValuePromise;
  upsertEntryAttributeValue: (args: {
    where: EntryAttributeValueWhereUniqueInput;
    create: EntryAttributeValueCreateInput;
    update: EntryAttributeValueUpdateInput;
  }) => EntryAttributeValuePromise;
  deleteEntryAttributeValue: (
    where: EntryAttributeValueWhereUniqueInput
  ) => EntryAttributeValuePromise;
  deleteManyEntryAttributeValues: (
    where?: EntryAttributeValueWhereInput
  ) => BatchPayloadPromise;
  createEntryRelationType: (
    data: EntryRelationTypeCreateInput
  ) => EntryRelationTypePromise;
  updateEntryRelationType: (args: {
    data: EntryRelationTypeUpdateInput;
    where: EntryRelationTypeWhereUniqueInput;
  }) => EntryRelationTypePromise;
  updateManyEntryRelationTypes: (args: {
    data: EntryRelationTypeUpdateManyMutationInput;
    where?: EntryRelationTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertEntryRelationType: (args: {
    where: EntryRelationTypeWhereUniqueInput;
    create: EntryRelationTypeCreateInput;
    update: EntryRelationTypeUpdateInput;
  }) => EntryRelationTypePromise;
  deleteEntryRelationType: (
    where: EntryRelationTypeWhereUniqueInput
  ) => EntryRelationTypePromise;
  deleteManyEntryRelationTypes: (
    where?: EntryRelationTypeWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRelatedEntry: (data: RelatedEntryCreateInput) => RelatedEntryPromise;
  updateRelatedEntry: (args: {
    data: RelatedEntryUpdateInput;
    where: RelatedEntryWhereUniqueInput;
  }) => RelatedEntryPromise;
  upsertRelatedEntry: (args: {
    where: RelatedEntryWhereUniqueInput;
    create: RelatedEntryCreateInput;
    update: RelatedEntryUpdateInput;
  }) => RelatedEntryPromise;
  deleteRelatedEntry: (
    where: RelatedEntryWhereUniqueInput
  ) => RelatedEntryPromise;
  deleteManyRelatedEntries: (
    where?: RelatedEntryWhereInput
  ) => BatchPayloadPromise;
  createScope: (data: ScopeCreateInput) => ScopePromise;
  updateScope: (args: {
    data: ScopeUpdateInput;
    where: ScopeWhereUniqueInput;
  }) => ScopePromise;
  updateManyScopes: (args: {
    data: ScopeUpdateManyMutationInput;
    where?: ScopeWhereInput;
  }) => BatchPayloadPromise;
  upsertScope: (args: {
    where: ScopeWhereUniqueInput;
    create: ScopeCreateInput;
    update: ScopeUpdateInput;
  }) => ScopePromise;
  deleteScope: (where: ScopeWhereUniqueInput) => ScopePromise;
  deleteManyScopes: (where?: ScopeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attribute: (
    where?: AttributeSubscriptionWhereInput
  ) => AttributeSubscriptionPayloadSubscription;
  attributeValue: (
    where?: AttributeValueSubscriptionWhereInput
  ) => AttributeValueSubscriptionPayloadSubscription;
  entry: (
    where?: EntrySubscriptionWhereInput
  ) => EntrySubscriptionPayloadSubscription;
  entryAttributeValue: (
    where?: EntryAttributeValueSubscriptionWhereInput
  ) => EntryAttributeValueSubscriptionPayloadSubscription;
  entryRelationType: (
    where?: EntryRelationTypeSubscriptionWhereInput
  ) => EntryRelationTypeSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  relatedEntry: (
    where?: RelatedEntrySubscriptionWhereInput
  ) => RelatedEntrySubscriptionPayloadSubscription;
  scope: (
    where?: ScopeSubscriptionWhereInput
  ) => ScopeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RelatedEntryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttributeValueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "isDefault_ASC"
  | "isDefault_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type AttributeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "type_ASC"
  | "type_DESC"
  | "mandatoryCondition_ASC"
  | "mandatoryCondition_DESC"
  | "displaySearchCondition_ASC"
  | "displaySearchCondition_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EntryAttributeValueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EntryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EntryRelationTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScopeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface ScopeCreateInput {
  name: String;
  description?: String;
  user: UserCreateOneInput;
}

export interface EntryRelationTypeUpsertNestedInput {
  update: EntryRelationTypeUpdateDataInput;
  create: EntryRelationTypeCreateInput;
}

export interface AttributeValueCreateWithoutAttributeInput {
  value: String;
  isDefault?: String;
}

export type AttributeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AttributeUpdateInput {
  title?: String;
  description?: String;
  type?: String;
  mandatoryCondition?: String;
  displaySearchCondition?: String;
  scope?: ScopeUpdateOneRequiredInput;
  values?: AttributeValueUpdateManyWithoutAttributeInput;
}

export interface AttributeValueWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  attribute?: AttributeWhereInput;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  isDefault?: String;
  isDefault_not?: String;
  isDefault_in?: String[] | String;
  isDefault_not_in?: String[] | String;
  isDefault_lt?: String;
  isDefault_lte?: String;
  isDefault_gt?: String;
  isDefault_gte?: String;
  isDefault_contains?: String;
  isDefault_not_contains?: String;
  isDefault_starts_with?: String;
  isDefault_not_starts_with?: String;
  isDefault_ends_with?: String;
  isDefault_not_ends_with?: String;
  AND?: AttributeValueWhereInput[] | AttributeValueWhereInput;
  OR?: AttributeValueWhereInput[] | AttributeValueWhereInput;
  NOT?: AttributeValueWhereInput[] | AttributeValueWhereInput;
}

export interface ScopeUpdateOneRequiredInput {
  create?: ScopeCreateInput;
  update?: ScopeUpdateDataInput;
  upsert?: ScopeUpsertNestedInput;
  connect?: ScopeWhereUniqueInput;
}

export interface ScopeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: ScopeWhereInput[] | ScopeWhereInput;
  OR?: ScopeWhereInput[] | ScopeWhereInput;
  NOT?: ScopeWhereInput[] | ScopeWhereInput;
}

export interface ScopeUpdateDataInput {
  name?: String;
  description?: String;
  user?: UserUpdateOneRequiredInput;
}

export interface EntrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EntryWhereInput;
  AND?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
  OR?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
  NOT?: EntrySubscriptionWhereInput[] | EntrySubscriptionWhereInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface AttributeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AttributeWhereInput;
  AND?: AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput;
  OR?: AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput;
  NOT?: AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput;
}

export interface UserUpdateDataInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  name?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export type AttributeValueWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface RelatedEntryUpdateInput {
  from?: EntryUpdateOneRequiredWithoutRelatedEntriesFromInput;
  to?: EntryUpdateOneRequiredWithoutRelatedEntriesToInput;
  relationType?: EntryRelationTypeUpdateOneRequiredInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export type EntryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface EntryAttributeValueWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  entry?: EntryWhereInput;
  attributeValue?: AttributeValueWhereInput;
  AND?: EntryAttributeValueWhereInput[] | EntryAttributeValueWhereInput;
  OR?: EntryAttributeValueWhereInput[] | EntryAttributeValueWhereInput;
  NOT?: EntryAttributeValueWhereInput[] | EntryAttributeValueWhereInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface RelatedEntryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  from?: EntryWhereInput;
  to?: EntryWhereInput;
  relationType?: EntryRelationTypeWhereInput;
  AND?: RelatedEntryWhereInput[] | RelatedEntryWhereInput;
  OR?: RelatedEntryWhereInput[] | RelatedEntryWhereInput;
  NOT?: RelatedEntryWhereInput[] | RelatedEntryWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface EntryAttributeValueSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EntryAttributeValueWhereInput;
  AND?:
    | EntryAttributeValueSubscriptionWhereInput[]
    | EntryAttributeValueSubscriptionWhereInput;
  OR?:
    | EntryAttributeValueSubscriptionWhereInput[]
    | EntryAttributeValueSubscriptionWhereInput;
  NOT?:
    | EntryAttributeValueSubscriptionWhereInput[]
    | EntryAttributeValueSubscriptionWhereInput;
}

export interface PostUpdateManyDataInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface EntryRelationTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EntryRelationTypeWhereInput;
  AND?:
    | EntryRelationTypeSubscriptionWhereInput[]
    | EntryRelationTypeSubscriptionWhereInput;
  OR?:
    | EntryRelationTypeSubscriptionWhereInput[]
    | EntryRelationTypeSubscriptionWhereInput;
  NOT?:
    | EntryRelationTypeSubscriptionWhereInput[]
    | EntryRelationTypeSubscriptionWhereInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface ScopeUpsertNestedInput {
  update: ScopeUpdateDataInput;
  create: ScopeCreateInput;
}

export interface PostUpdateInput {
  published?: Boolean;
  title?: String;
  content?: String;
  author?: UserUpdateOneRequiredWithoutPostsInput;
}

export interface AttributeValueUpdateManyWithoutAttributeInput {
  create?:
    | AttributeValueCreateWithoutAttributeInput[]
    | AttributeValueCreateWithoutAttributeInput;
  delete?: AttributeValueWhereUniqueInput[] | AttributeValueWhereUniqueInput;
  connect?: AttributeValueWhereUniqueInput[] | AttributeValueWhereUniqueInput;
  disconnect?:
    | AttributeValueWhereUniqueInput[]
    | AttributeValueWhereUniqueInput;
  update?:
    | AttributeValueUpdateWithWhereUniqueWithoutAttributeInput[]
    | AttributeValueUpdateWithWhereUniqueWithoutAttributeInput;
  upsert?:
    | AttributeValueUpsertWithWhereUniqueWithoutAttributeInput[]
    | AttributeValueUpsertWithWhereUniqueWithoutAttributeInput;
  deleteMany?:
    | AttributeValueScalarWhereInput[]
    | AttributeValueScalarWhereInput;
  updateMany?:
    | AttributeValueUpdateManyWithWhereNestedInput[]
    | AttributeValueUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface AttributeValueUpdateWithWhereUniqueWithoutAttributeInput {
  where: AttributeValueWhereUniqueInput;
  data: AttributeValueUpdateWithoutAttributeDataInput;
}

export interface PostCreateInput {
  published?: Boolean;
  title: String;
  content: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface AttributeValueUpdateWithoutAttributeDataInput {
  value?: String;
  isDefault?: String;
}

export interface EntryRelationTypeUpdateInput {
  value?: String;
  description?: String;
  scope?: ScopeUpdateOneRequiredInput;
}

export interface AttributeValueUpsertWithWhereUniqueWithoutAttributeInput {
  where: AttributeValueWhereUniqueInput;
  update: AttributeValueUpdateWithoutAttributeDataInput;
  create: AttributeValueCreateWithoutAttributeInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface AttributeValueScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  isDefault?: String;
  isDefault_not?: String;
  isDefault_in?: String[] | String;
  isDefault_not_in?: String[] | String;
  isDefault_lt?: String;
  isDefault_lte?: String;
  isDefault_gt?: String;
  isDefault_gte?: String;
  isDefault_contains?: String;
  isDefault_not_contains?: String;
  isDefault_starts_with?: String;
  isDefault_not_starts_with?: String;
  isDefault_ends_with?: String;
  isDefault_not_ends_with?: String;
  AND?: AttributeValueScalarWhereInput[] | AttributeValueScalarWhereInput;
  OR?: AttributeValueScalarWhereInput[] | AttributeValueScalarWhereInput;
  NOT?: AttributeValueScalarWhereInput[] | AttributeValueScalarWhereInput;
}

export interface EntryUpdateWithoutAttributeValuesDataInput {
  title?: String;
  content?: String;
  user?: UserUpdateOneInput;
  relatedEntriesFrom?: RelatedEntryUpdateManyWithoutFromInput;
  relatedEntriesTo?: RelatedEntryUpdateManyWithoutToInput;
}

export interface AttributeValueUpdateManyWithWhereNestedInput {
  where: AttributeValueScalarWhereInput;
  data: AttributeValueUpdateManyDataInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AttributeValueUpdateManyDataInput {
  value?: String;
  isDefault?: String;
}

export interface EntryCreateWithoutAttributeValuesInput {
  title: String;
  content: String;
  user?: UserCreateOneInput;
  relatedEntriesFrom?: RelatedEntryCreateManyWithoutFromInput;
  relatedEntriesTo?: RelatedEntryCreateManyWithoutToInput;
}

export interface AttributeUpdateManyMutationInput {
  title?: String;
  description?: String;
  type?: String;
  mandatoryCondition?: String;
  displaySearchCondition?: String;
}

export type RelatedEntryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface RelatedEntryScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?: RelatedEntryScalarWhereInput[] | RelatedEntryScalarWhereInput;
  OR?: RelatedEntryScalarWhereInput[] | RelatedEntryScalarWhereInput;
  NOT?: RelatedEntryScalarWhereInput[] | RelatedEntryScalarWhereInput;
}

export interface EntryUpdateManyMutationInput {
  title?: String;
  content?: String;
}

export interface RelatedEntryUpsertWithWhereUniqueWithoutFromInput {
  where: RelatedEntryWhereUniqueInput;
  update: RelatedEntryUpdateWithoutFromDataInput;
  create: RelatedEntryCreateWithoutFromInput;
}

export type ScopeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AttributeValueCreateInput {
  attribute: AttributeCreateOneWithoutValuesInput;
  value: String;
  isDefault?: String;
}

export interface EntryUpsertWithoutRelatedEntriesFromInput {
  update: EntryUpdateWithoutRelatedEntriesFromDataInput;
  create: EntryCreateWithoutRelatedEntriesFromInput;
}

export interface AttributeCreateOneWithoutValuesInput {
  create?: AttributeCreateWithoutValuesInput;
  connect?: AttributeWhereUniqueInput;
}

export interface EntryUpdateOneRequiredWithoutRelatedEntriesFromInput {
  create?: EntryCreateWithoutRelatedEntriesFromInput;
  update?: EntryUpdateWithoutRelatedEntriesFromDataInput;
  upsert?: EntryUpsertWithoutRelatedEntriesFromInput;
  connect?: EntryWhereUniqueInput;
}

export interface AttributeCreateWithoutValuesInput {
  title: String;
  description?: String;
  type: String;
  mandatoryCondition?: String;
  displaySearchCondition?: String;
  scope: ScopeCreateOneInput;
}

export interface ScopeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ScopeWhereInput;
  AND?: ScopeSubscriptionWhereInput[] | ScopeSubscriptionWhereInput;
  OR?: ScopeSubscriptionWhereInput[] | ScopeSubscriptionWhereInput;
  NOT?: ScopeSubscriptionWhereInput[] | ScopeSubscriptionWhereInput;
}

export interface AttributeValueUpdateInput {
  attribute?: AttributeUpdateOneRequiredWithoutValuesInput;
  value?: String;
  isDefault?: String;
}

export interface RelatedEntryUpdateWithWhereUniqueWithoutToInput {
  where: RelatedEntryWhereUniqueInput;
  data: RelatedEntryUpdateWithoutToDataInput;
}

export interface AttributeUpdateOneRequiredWithoutValuesInput {
  create?: AttributeCreateWithoutValuesInput;
  update?: AttributeUpdateWithoutValuesDataInput;
  upsert?: AttributeUpsertWithoutValuesInput;
  connect?: AttributeWhereUniqueInput;
}

export interface ScopeCreateOneInput {
  create?: ScopeCreateInput;
  connect?: ScopeWhereUniqueInput;
}

export interface AttributeUpdateWithoutValuesDataInput {
  title?: String;
  description?: String;
  type?: String;
  mandatoryCondition?: String;
  displaySearchCondition?: String;
  scope?: ScopeUpdateOneRequiredInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface AttributeUpsertWithoutValuesInput {
  update: AttributeUpdateWithoutValuesDataInput;
  create: AttributeCreateWithoutValuesInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface AttributeValueUpdateManyMutationInput {
  value?: String;
  isDefault?: String;
}

export interface AttributeValueCreateManyWithoutAttributeInput {
  create?:
    | AttributeValueCreateWithoutAttributeInput[]
    | AttributeValueCreateWithoutAttributeInput;
  connect?: AttributeValueWhereUniqueInput[] | AttributeValueWhereUniqueInput;
}

export interface EntryCreateInput {
  title: String;
  content: String;
  user?: UserCreateOneInput;
  attributeValues?: EntryAttributeValueCreateManyWithoutEntryInput;
  relatedEntriesFrom?: RelatedEntryCreateManyWithoutFromInput;
  relatedEntriesTo?: RelatedEntryCreateManyWithoutToInput;
}

export interface AttributeValueSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AttributeValueWhereInput;
  AND?:
    | AttributeValueSubscriptionWhereInput[]
    | AttributeValueSubscriptionWhereInput;
  OR?:
    | AttributeValueSubscriptionWhereInput[]
    | AttributeValueSubscriptionWhereInput;
  NOT?:
    | AttributeValueSubscriptionWhereInput[]
    | AttributeValueSubscriptionWhereInput;
}

export interface EntryAttributeValueCreateManyWithoutEntryInput {
  create?:
    | EntryAttributeValueCreateWithoutEntryInput[]
    | EntryAttributeValueCreateWithoutEntryInput;
  connect?:
    | EntryAttributeValueWhereUniqueInput[]
    | EntryAttributeValueWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface EntryAttributeValueCreateWithoutEntryInput {
  attributeValue: AttributeValueCreateOneInput;
}

export interface ScopeUpdateInput {
  name?: String;
  description?: String;
  user?: UserUpdateOneRequiredInput;
}

export interface AttributeValueCreateOneInput {
  create?: AttributeValueCreateInput;
  connect?: AttributeValueWhereUniqueInput;
}

export interface PostUpdateManyMutationInput {
  published?: Boolean;
  title?: String;
  content?: String;
}

export interface RelatedEntryCreateManyWithoutFromInput {
  create?:
    | RelatedEntryCreateWithoutFromInput[]
    | RelatedEntryCreateWithoutFromInput;
  connect?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
}

export interface EntryRelationTypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  scope?: ScopeWhereInput;
  AND?: EntryRelationTypeWhereInput[] | EntryRelationTypeWhereInput;
  OR?: EntryRelationTypeWhereInput[] | EntryRelationTypeWhereInput;
  NOT?: EntryRelationTypeWhereInput[] | EntryRelationTypeWhereInput;
}

export interface RelatedEntryCreateWithoutFromInput {
  to: EntryCreateOneWithoutRelatedEntriesToInput;
  relationType: EntryRelationTypeCreateOneInput;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String;
  password?: String;
  name?: String;
}

export interface EntryCreateOneWithoutRelatedEntriesToInput {
  create?: EntryCreateWithoutRelatedEntriesToInput;
  connect?: EntryWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  password: String;
  name: String;
}

export interface EntryCreateWithoutRelatedEntriesToInput {
  title: String;
  content: String;
  user?: UserCreateOneInput;
  attributeValues?: EntryAttributeValueCreateManyWithoutEntryInput;
  relatedEntriesFrom?: RelatedEntryCreateManyWithoutFromInput;
}

export interface EntryRelationTypeUpdateManyMutationInput {
  value?: String;
  description?: String;
}

export interface EntryRelationTypeCreateOneInput {
  create?: EntryRelationTypeCreateInput;
  connect?: EntryRelationTypeWhereUniqueInput;
}

export interface EntryUpsertWithoutAttributeValuesInput {
  update: EntryUpdateWithoutAttributeValuesDataInput;
  create: EntryCreateWithoutAttributeValuesInput;
}

export interface EntryRelationTypeCreateInput {
  value: String;
  description?: String;
  scope: ScopeCreateOneInput;
}

export interface EntryAttributeValueUpdateInput {
  entry?: EntryUpdateOneRequiredWithoutAttributeValuesInput;
  attributeValue?: AttributeValueUpdateOneRequiredInput;
}

export interface RelatedEntryCreateManyWithoutToInput {
  create?:
    | RelatedEntryCreateWithoutToInput[]
    | RelatedEntryCreateWithoutToInput;
  connect?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
}

export interface EntryAttributeValueCreateInput {
  entry: EntryCreateOneWithoutAttributeValuesInput;
  attributeValue: AttributeValueCreateOneInput;
}

export interface RelatedEntryCreateWithoutToInput {
  from: EntryCreateOneWithoutRelatedEntriesFromInput;
  relationType: EntryRelationTypeCreateOneInput;
}

export interface RelatedEntrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RelatedEntryWhereInput;
  AND?:
    | RelatedEntrySubscriptionWhereInput[]
    | RelatedEntrySubscriptionWhereInput;
  OR?:
    | RelatedEntrySubscriptionWhereInput[]
    | RelatedEntrySubscriptionWhereInput;
  NOT?:
    | RelatedEntrySubscriptionWhereInput[]
    | RelatedEntrySubscriptionWhereInput;
}

export interface EntryCreateOneWithoutRelatedEntriesFromInput {
  create?: EntryCreateWithoutRelatedEntriesFromInput;
  connect?: EntryWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface EntryCreateWithoutRelatedEntriesFromInput {
  title: String;
  content: String;
  user?: UserCreateOneInput;
  attributeValues?: EntryAttributeValueCreateManyWithoutEntryInput;
  relatedEntriesTo?: RelatedEntryCreateManyWithoutToInput;
}

export interface RelatedEntryUpdateManyWithoutToInput {
  create?:
    | RelatedEntryCreateWithoutToInput[]
    | RelatedEntryCreateWithoutToInput;
  delete?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
  connect?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
  disconnect?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
  update?:
    | RelatedEntryUpdateWithWhereUniqueWithoutToInput[]
    | RelatedEntryUpdateWithWhereUniqueWithoutToInput;
  upsert?:
    | RelatedEntryUpsertWithWhereUniqueWithoutToInput[]
    | RelatedEntryUpsertWithWhereUniqueWithoutToInput;
  deleteMany?: RelatedEntryScalarWhereInput[] | RelatedEntryScalarWhereInput;
}

export interface EntryUpdateInput {
  title?: String;
  content?: String;
  user?: UserUpdateOneInput;
  attributeValues?: EntryAttributeValueUpdateManyWithoutEntryInput;
  relatedEntriesFrom?: RelatedEntryUpdateManyWithoutFromInput;
  relatedEntriesTo?: RelatedEntryUpdateManyWithoutToInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface PostCreateWithoutAuthorInput {
  published?: Boolean;
  title: String;
  content: String;
}

export interface EntryAttributeValueUpdateManyWithoutEntryInput {
  create?:
    | EntryAttributeValueCreateWithoutEntryInput[]
    | EntryAttributeValueCreateWithoutEntryInput;
  delete?:
    | EntryAttributeValueWhereUniqueInput[]
    | EntryAttributeValueWhereUniqueInput;
  connect?:
    | EntryAttributeValueWhereUniqueInput[]
    | EntryAttributeValueWhereUniqueInput;
  disconnect?:
    | EntryAttributeValueWhereUniqueInput[]
    | EntryAttributeValueWhereUniqueInput;
  update?:
    | EntryAttributeValueUpdateWithWhereUniqueWithoutEntryInput[]
    | EntryAttributeValueUpdateWithWhereUniqueWithoutEntryInput;
  upsert?:
    | EntryAttributeValueUpsertWithWhereUniqueWithoutEntryInput[]
    | EntryAttributeValueUpsertWithWhereUniqueWithoutEntryInput;
  deleteMany?:
    | EntryAttributeValueScalarWhereInput[]
    | EntryAttributeValueScalarWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface EntryAttributeValueUpdateWithWhereUniqueWithoutEntryInput {
  where: EntryAttributeValueWhereUniqueInput;
  data: EntryAttributeValueUpdateWithoutEntryDataInput;
}

export interface RelatedEntryCreateInput {
  from: EntryCreateOneWithoutRelatedEntriesFromInput;
  to: EntryCreateOneWithoutRelatedEntriesToInput;
  relationType: EntryRelationTypeCreateOneInput;
}

export interface EntryAttributeValueUpdateWithoutEntryDataInput {
  attributeValue?: AttributeValueUpdateOneRequiredInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface AttributeValueUpdateOneRequiredInput {
  create?: AttributeValueCreateInput;
  update?: AttributeValueUpdateDataInput;
  upsert?: AttributeValueUpsertNestedInput;
  connect?: AttributeValueWhereUniqueInput;
}

export type EntryAttributeValueWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AttributeValueUpdateDataInput {
  attribute?: AttributeUpdateOneRequiredWithoutValuesInput;
  value?: String;
  isDefault?: String;
}

export interface EntryUpdateOneRequiredWithoutAttributeValuesInput {
  create?: EntryCreateWithoutAttributeValuesInput;
  update?: EntryUpdateWithoutAttributeValuesDataInput;
  upsert?: EntryUpsertWithoutAttributeValuesInput;
  connect?: EntryWhereUniqueInput;
}

export interface AttributeValueUpsertNestedInput {
  update: AttributeValueUpdateDataInput;
  create: AttributeValueCreateInput;
}

export interface RelatedEntryUpsertWithWhereUniqueWithoutToInput {
  where: RelatedEntryWhereUniqueInput;
  update: RelatedEntryUpdateWithoutToDataInput;
  create: RelatedEntryCreateWithoutToInput;
}

export interface EntryAttributeValueUpsertWithWhereUniqueWithoutEntryInput {
  where: EntryAttributeValueWhereUniqueInput;
  update: EntryAttributeValueUpdateWithoutEntryDataInput;
  create: EntryAttributeValueCreateWithoutEntryInput;
}

export interface RelatedEntryUpdateWithoutToDataInput {
  from?: EntryUpdateOneRequiredWithoutRelatedEntriesFromInput;
  relationType?: EntryRelationTypeUpdateOneRequiredInput;
}

export interface EntryAttributeValueScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  AND?:
    | EntryAttributeValueScalarWhereInput[]
    | EntryAttributeValueScalarWhereInput;
  OR?:
    | EntryAttributeValueScalarWhereInput[]
    | EntryAttributeValueScalarWhereInput;
  NOT?:
    | EntryAttributeValueScalarWhereInput[]
    | EntryAttributeValueScalarWhereInput;
}

export interface UserCreateInput {
  email: String;
  password: String;
  name: String;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface RelatedEntryUpdateManyWithoutFromInput {
  create?:
    | RelatedEntryCreateWithoutFromInput[]
    | RelatedEntryCreateWithoutFromInput;
  delete?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
  connect?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
  disconnect?: RelatedEntryWhereUniqueInput[] | RelatedEntryWhereUniqueInput;
  update?:
    | RelatedEntryUpdateWithWhereUniqueWithoutFromInput[]
    | RelatedEntryUpdateWithWhereUniqueWithoutFromInput;
  upsert?:
    | RelatedEntryUpsertWithWhereUniqueWithoutFromInput[]
    | RelatedEntryUpsertWithWhereUniqueWithoutFromInput;
  deleteMany?: RelatedEntryScalarWhereInput[] | RelatedEntryScalarWhereInput;
}

export interface ScopeUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface RelatedEntryUpdateWithWhereUniqueWithoutFromInput {
  where: RelatedEntryWhereUniqueInput;
  data: RelatedEntryUpdateWithoutFromDataInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  published?: Boolean;
  published_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface RelatedEntryUpdateWithoutFromDataInput {
  to?: EntryUpdateOneRequiredWithoutRelatedEntriesToInput;
  relationType?: EntryRelationTypeUpdateOneRequiredInput;
}

export interface EntryCreateOneWithoutAttributeValuesInput {
  create?: EntryCreateWithoutAttributeValuesInput;
  connect?: EntryWhereUniqueInput;
}

export interface EntryUpdateOneRequiredWithoutRelatedEntriesToInput {
  create?: EntryCreateWithoutRelatedEntriesToInput;
  update?: EntryUpdateWithoutRelatedEntriesToDataInput;
  upsert?: EntryUpsertWithoutRelatedEntriesToInput;
  connect?: EntryWhereUniqueInput;
}

export interface AttributeCreateInput {
  title: String;
  description?: String;
  type: String;
  mandatoryCondition?: String;
  displaySearchCondition?: String;
  scope: ScopeCreateOneInput;
  values?: AttributeValueCreateManyWithoutAttributeInput;
}

export interface EntryRelationTypeUpdateDataInput {
  value?: String;
  description?: String;
  scope?: ScopeUpdateOneRequiredInput;
}

export interface EntryRelationTypeUpdateOneRequiredInput {
  create?: EntryRelationTypeCreateInput;
  update?: EntryRelationTypeUpdateDataInput;
  upsert?: EntryRelationTypeUpsertNestedInput;
  connect?: EntryRelationTypeWhereUniqueInput;
}

export interface EntryUpsertWithoutRelatedEntriesToInput {
  update: EntryUpdateWithoutRelatedEntriesToDataInput;
  create: EntryCreateWithoutRelatedEntriesToInput;
}

export interface EntryUpdateWithoutRelatedEntriesToDataInput {
  title?: String;
  content?: String;
  user?: UserUpdateOneInput;
  attributeValues?: EntryAttributeValueUpdateManyWithoutEntryInput;
  relatedEntriesFrom?: RelatedEntryUpdateManyWithoutFromInput;
}

export interface AttributeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  mandatoryCondition?: String;
  mandatoryCondition_not?: String;
  mandatoryCondition_in?: String[] | String;
  mandatoryCondition_not_in?: String[] | String;
  mandatoryCondition_lt?: String;
  mandatoryCondition_lte?: String;
  mandatoryCondition_gt?: String;
  mandatoryCondition_gte?: String;
  mandatoryCondition_contains?: String;
  mandatoryCondition_not_contains?: String;
  mandatoryCondition_starts_with?: String;
  mandatoryCondition_not_starts_with?: String;
  mandatoryCondition_ends_with?: String;
  mandatoryCondition_not_ends_with?: String;
  displaySearchCondition?: String;
  displaySearchCondition_not?: String;
  displaySearchCondition_in?: String[] | String;
  displaySearchCondition_not_in?: String[] | String;
  displaySearchCondition_lt?: String;
  displaySearchCondition_lte?: String;
  displaySearchCondition_gt?: String;
  displaySearchCondition_gte?: String;
  displaySearchCondition_contains?: String;
  displaySearchCondition_not_contains?: String;
  displaySearchCondition_starts_with?: String;
  displaySearchCondition_not_starts_with?: String;
  displaySearchCondition_ends_with?: String;
  displaySearchCondition_not_ends_with?: String;
  scope?: ScopeWhereInput;
  values_every?: AttributeValueWhereInput;
  values_some?: AttributeValueWhereInput;
  values_none?: AttributeValueWhereInput;
  AND?: AttributeWhereInput[] | AttributeWhereInput;
  OR?: AttributeWhereInput[] | AttributeWhereInput;
  NOT?: AttributeWhereInput[] | AttributeWhereInput;
}

export interface EntryUpdateWithoutRelatedEntriesFromDataInput {
  title?: String;
  content?: String;
  user?: UserUpdateOneInput;
  attributeValues?: EntryAttributeValueUpdateManyWithoutEntryInput;
  relatedEntriesTo?: RelatedEntryUpdateManyWithoutToInput;
}

export type EntryRelationTypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface EntryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  user?: UserWhereInput;
  attributeValues_every?: EntryAttributeValueWhereInput;
  attributeValues_some?: EntryAttributeValueWhereInput;
  attributeValues_none?: EntryAttributeValueWhereInput;
  relatedEntriesFrom_every?: RelatedEntryWhereInput;
  relatedEntriesFrom_some?: RelatedEntryWhereInput;
  relatedEntriesFrom_none?: RelatedEntryWhereInput;
  relatedEntriesTo_every?: RelatedEntryWhereInput;
  relatedEntriesTo_some?: RelatedEntryWhereInput;
  relatedEntriesTo_none?: RelatedEntryWhereInput;
  AND?: EntryWhereInput[] | EntryWhereInput;
  OR?: EntryWhereInput[] | EntryWhereInput;
  NOT?: EntryWhereInput[] | EntryWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AttributeValueEdge {
  node: AttributeValue;
  cursor: String;
}

export interface AttributeValueEdgePromise
  extends Promise<AttributeValueEdge>,
    Fragmentable {
  node: <T = AttributeValuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttributeValueEdgeSubscription
  extends Promise<AsyncIterator<AttributeValueEdge>>,
    Fragmentable {
  node: <T = AttributeValueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ScopeSubscriptionPayload {
  mutation: MutationType;
  node: Scope;
  updatedFields: String[];
  previousValues: ScopePreviousValues;
}

export interface ScopeSubscriptionPayloadPromise
  extends Promise<ScopeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ScopePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ScopePreviousValuesPromise>() => T;
}

export interface ScopeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScopeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScopeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ScopePreviousValuesSubscription>() => T;
}

export interface AttributeValueConnection {
  pageInfo: PageInfo;
  edges: AttributeValueEdge[];
}

export interface AttributeValueConnectionPromise
  extends Promise<AttributeValueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttributeValueEdge>>() => T;
  aggregate: <T = AggregateAttributeValuePromise>() => T;
}

export interface AttributeValueConnectionSubscription
  extends Promise<AsyncIterator<AttributeValueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttributeValueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttributeValueSubscription>() => T;
}

export interface AggregateAttribute {
  count: Int;
}

export interface AggregateAttributePromise
  extends Promise<AggregateAttribute>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttributeSubscription
  extends Promise<AsyncIterator<AggregateAttribute>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AttributeEdge {
  node: Attribute;
  cursor: String;
}

export interface AttributeEdgePromise
  extends Promise<AttributeEdge>,
    Fragmentable {
  node: <T = AttributePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttributeEdgeSubscription
  extends Promise<AsyncIterator<AttributeEdge>>,
    Fragmentable {
  node: <T = AttributeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateScope {
  count: Int;
}

export interface AggregateScopePromise
  extends Promise<AggregateScope>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScopeSubscription
  extends Promise<AsyncIterator<AggregateScope>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ScopeConnection {
  pageInfo: PageInfo;
  edges: ScopeEdge[];
}

export interface ScopeConnectionPromise
  extends Promise<ScopeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScopeEdge>>() => T;
  aggregate: <T = AggregateScopePromise>() => T;
}

export interface ScopeConnectionSubscription
  extends Promise<AsyncIterator<ScopeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScopeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScopeSubscription>() => T;
}

export interface AttributeConnection {
  pageInfo: PageInfo;
  edges: AttributeEdge[];
}

export interface AttributeConnectionPromise
  extends Promise<AttributeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttributeEdge>>() => T;
  aggregate: <T = AggregateAttributePromise>() => T;
}

export interface AttributeConnectionSubscription
  extends Promise<AsyncIterator<AttributeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttributeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttributeSubscription>() => T;
}

export interface RelatedEntryEdge {
  node: RelatedEntry;
  cursor: String;
}

export interface RelatedEntryEdgePromise
  extends Promise<RelatedEntryEdge>,
    Fragmentable {
  node: <T = RelatedEntryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RelatedEntryEdgeSubscription
  extends Promise<AsyncIterator<RelatedEntryEdge>>,
    Fragmentable {
  node: <T = RelatedEntrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AttributeValue {
  id: ID_Output;
  value: String;
  isDefault?: String;
}

export interface AttributeValuePromise
  extends Promise<AttributeValue>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  attribute: <T = AttributePromise>() => T;
  value: () => Promise<String>;
  isDefault: () => Promise<String>;
}

export interface AttributeValueSubscription
  extends Promise<AsyncIterator<AttributeValue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attribute: <T = AttributeSubscription>() => T;
  value: () => Promise<AsyncIterator<String>>;
  isDefault: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AttributeSubscriptionPayload {
  mutation: MutationType;
  node: Attribute;
  updatedFields: String[];
  previousValues: AttributePreviousValues;
}

export interface AttributeSubscriptionPayloadPromise
  extends Promise<AttributeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttributePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttributePreviousValuesPromise>() => T;
}

export interface AttributeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttributeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttributeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttributePreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface AttributePreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  type: String;
  mandatoryCondition?: String;
  displaySearchCondition?: String;
}

export interface AttributePreviousValuesPromise
  extends Promise<AttributePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  type: () => Promise<String>;
  mandatoryCondition: () => Promise<String>;
  displaySearchCondition: () => Promise<String>;
}

export interface AttributePreviousValuesSubscription
  extends Promise<AsyncIterator<AttributePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  mandatoryCondition: () => Promise<AsyncIterator<String>>;
  displaySearchCondition: () => Promise<AsyncIterator<String>>;
}

export interface EntryRelationTypeEdge {
  node: EntryRelationType;
  cursor: String;
}

export interface EntryRelationTypeEdgePromise
  extends Promise<EntryRelationTypeEdge>,
    Fragmentable {
  node: <T = EntryRelationTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EntryRelationTypeEdgeSubscription
  extends Promise<AsyncIterator<EntryRelationTypeEdge>>,
    Fragmentable {
  node: <T = EntryRelationTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface AggregateEntryAttributeValue {
  count: Int;
}

export interface AggregateEntryAttributeValuePromise
  extends Promise<AggregateEntryAttributeValue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEntryAttributeValueSubscription
  extends Promise<AsyncIterator<AggregateEntryAttributeValue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AttributeValueSubscriptionPayload {
  mutation: MutationType;
  node: AttributeValue;
  updatedFields: String[];
  previousValues: AttributeValuePreviousValues;
}

export interface AttributeValueSubscriptionPayloadPromise
  extends Promise<AttributeValueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttributeValuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttributeValuePreviousValuesPromise>() => T;
}

export interface AttributeValueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttributeValueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttributeValueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttributeValuePreviousValuesSubscription>() => T;
}

export interface EntryAttributeValueConnection {
  pageInfo: PageInfo;
  edges: EntryAttributeValueEdge[];
}

export interface EntryAttributeValueConnectionPromise
  extends Promise<EntryAttributeValueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EntryAttributeValueEdge>>() => T;
  aggregate: <T = AggregateEntryAttributeValuePromise>() => T;
}

export interface EntryAttributeValueConnectionSubscription
  extends Promise<AsyncIterator<EntryAttributeValueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<EntryAttributeValueEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateEntryAttributeValueSubscription>() => T;
}

export interface AttributeValuePreviousValues {
  id: ID_Output;
  value: String;
  isDefault?: String;
}

export interface AttributeValuePreviousValuesPromise
  extends Promise<AttributeValuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  isDefault: () => Promise<String>;
}

export interface AttributeValuePreviousValuesSubscription
  extends Promise<AsyncIterator<AttributeValuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  isDefault: () => Promise<AsyncIterator<String>>;
}

export interface EntryEdge {
  node: Entry;
  cursor: String;
}

export interface EntryEdgePromise extends Promise<EntryEdge>, Fragmentable {
  node: <T = EntryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EntryEdgeSubscription
  extends Promise<AsyncIterator<EntryEdge>>,
    Fragmentable {
  node: <T = EntrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface EntryRelationType {
  id: ID_Output;
  value: String;
  description?: String;
}

export interface EntryRelationTypePromise
  extends Promise<EntryRelationType>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  description: () => Promise<String>;
  scope: <T = ScopePromise>() => T;
}

export interface EntryRelationTypeSubscription
  extends Promise<AsyncIterator<EntryRelationType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  scope: <T = ScopeSubscription>() => T;
}

export interface EntrySubscriptionPayload {
  mutation: MutationType;
  node: Entry;
  updatedFields: String[];
  previousValues: EntryPreviousValues;
}

export interface EntrySubscriptionPayloadPromise
  extends Promise<EntrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EntryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EntryPreviousValuesPromise>() => T;
}

export interface EntrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EntrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EntrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EntryPreviousValuesSubscription>() => T;
}

export interface EntryAttributeValue {
  id: ID_Output;
}

export interface EntryAttributeValuePromise
  extends Promise<EntryAttributeValue>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  entry: <T = EntryPromise>() => T;
  attributeValue: <T = AttributeValuePromise>() => T;
}

export interface EntryAttributeValueSubscription
  extends Promise<AsyncIterator<EntryAttributeValue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  entry: <T = EntrySubscription>() => T;
  attributeValue: <T = AttributeValueSubscription>() => T;
}

export interface EntryPreviousValues {
  id: ID_Output;
  title: String;
  content: String;
}

export interface EntryPreviousValuesPromise
  extends Promise<EntryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface EntryPreviousValuesSubscription
  extends Promise<AsyncIterator<EntryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttributeValue {
  count: Int;
}

export interface AggregateAttributeValuePromise
  extends Promise<AggregateAttributeValue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttributeValueSubscription
  extends Promise<AsyncIterator<AggregateAttributeValue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Attribute {
  id: ID_Output;
  title: String;
  description?: String;
  type: String;
  mandatoryCondition?: String;
  displaySearchCondition?: String;
}

export interface AttributePromise extends Promise<Attribute>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  type: () => Promise<String>;
  mandatoryCondition: () => Promise<String>;
  displaySearchCondition: () => Promise<String>;
  scope: <T = ScopePromise>() => T;
  values: <T = FragmentableArray<AttributeValue>>(args?: {
    where?: AttributeValueWhereInput;
    orderBy?: AttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttributeSubscription
  extends Promise<AsyncIterator<Attribute>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  mandatoryCondition: () => Promise<AsyncIterator<String>>;
  displaySearchCondition: () => Promise<AsyncIterator<String>>;
  scope: <T = ScopeSubscription>() => T;
  values: <T = Promise<AsyncIterator<AttributeValueSubscription>>>(args?: {
    where?: AttributeValueWhereInput;
    orderBy?: AttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface EntryAttributeValueSubscriptionPayload {
  mutation: MutationType;
  node: EntryAttributeValue;
  updatedFields: String[];
  previousValues: EntryAttributeValuePreviousValues;
}

export interface EntryAttributeValueSubscriptionPayloadPromise
  extends Promise<EntryAttributeValueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EntryAttributeValuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EntryAttributeValuePreviousValuesPromise>() => T;
}

export interface EntryAttributeValueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EntryAttributeValueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EntryAttributeValueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EntryAttributeValuePreviousValuesSubscription>() => T;
}

export interface AggregateRelatedEntry {
  count: Int;
}

export interface AggregateRelatedEntryPromise
  extends Promise<AggregateRelatedEntry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRelatedEntrySubscription
  extends Promise<AsyncIterator<AggregateRelatedEntry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EntryAttributeValuePreviousValues {
  id: ID_Output;
}

export interface EntryAttributeValuePreviousValuesPromise
  extends Promise<EntryAttributeValuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface EntryAttributeValuePreviousValuesSubscription
  extends Promise<AsyncIterator<EntryAttributeValuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ScopePreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface ScopePreviousValuesPromise
  extends Promise<ScopePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ScopePreviousValuesSubscription
  extends Promise<AsyncIterator<ScopePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface EntryRelationTypeConnection {
  pageInfo: PageInfo;
  edges: EntryRelationTypeEdge[];
}

export interface EntryRelationTypeConnectionPromise
  extends Promise<EntryRelationTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EntryRelationTypeEdge>>() => T;
  aggregate: <T = AggregateEntryRelationTypePromise>() => T;
}

export interface EntryRelationTypeConnectionSubscription
  extends Promise<AsyncIterator<EntryRelationTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EntryRelationTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEntryRelationTypeSubscription>() => T;
}

export interface EntryRelationTypeSubscriptionPayload {
  mutation: MutationType;
  node: EntryRelationType;
  updatedFields: String[];
  previousValues: EntryRelationTypePreviousValues;
}

export interface EntryRelationTypeSubscriptionPayloadPromise
  extends Promise<EntryRelationTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EntryRelationTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EntryRelationTypePreviousValuesPromise>() => T;
}

export interface EntryRelationTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EntryRelationTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EntryRelationTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EntryRelationTypePreviousValuesSubscription>() => T;
}

export interface AggregateEntry {
  count: Int;
}

export interface AggregateEntryPromise
  extends Promise<AggregateEntry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEntrySubscription
  extends Promise<AsyncIterator<AggregateEntry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EntryRelationTypePreviousValues {
  id: ID_Output;
  value: String;
  description?: String;
}

export interface EntryRelationTypePreviousValuesPromise
  extends Promise<EntryRelationTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  description: () => Promise<String>;
}

export interface EntryRelationTypePreviousValuesSubscription
  extends Promise<AsyncIterator<EntryRelationTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface RelatedEntry {
  id: ID_Output;
}

export interface RelatedEntryPromise
  extends Promise<RelatedEntry>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = EntryPromise>() => T;
  to: <T = EntryPromise>() => T;
  relationType: <T = EntryRelationTypePromise>() => T;
}

export interface RelatedEntrySubscription
  extends Promise<AsyncIterator<RelatedEntry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = EntrySubscription>() => T;
  to: <T = EntrySubscription>() => T;
  relationType: <T = EntryRelationTypeSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface RelatedEntryConnection {
  pageInfo: PageInfo;
  edges: RelatedEntryEdge[];
}

export interface RelatedEntryConnectionPromise
  extends Promise<RelatedEntryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RelatedEntryEdge>>() => T;
  aggregate: <T = AggregateRelatedEntryPromise>() => T;
}

export interface RelatedEntryConnectionSubscription
  extends Promise<AsyncIterator<RelatedEntryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RelatedEntryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRelatedEntrySubscription>() => T;
}

export interface EntryAttributeValueEdge {
  node: EntryAttributeValue;
  cursor: String;
}

export interface EntryAttributeValueEdgePromise
  extends Promise<EntryAttributeValueEdge>,
    Fragmentable {
  node: <T = EntryAttributeValuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EntryAttributeValueEdgeSubscription
  extends Promise<AsyncIterator<EntryAttributeValueEdge>>,
    Fragmentable {
  node: <T = EntryAttributeValueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RelatedEntryPreviousValues {
  id: ID_Output;
}

export interface RelatedEntryPreviousValuesPromise
  extends Promise<RelatedEntryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface RelatedEntryPreviousValuesSubscription
  extends Promise<AsyncIterator<RelatedEntryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface RelatedEntrySubscriptionPayload {
  mutation: MutationType;
  node: RelatedEntry;
  updatedFields: String[];
  previousValues: RelatedEntryPreviousValues;
}

export interface RelatedEntrySubscriptionPayloadPromise
  extends Promise<RelatedEntrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RelatedEntryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RelatedEntryPreviousValuesPromise>() => T;
}

export interface RelatedEntrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RelatedEntrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RelatedEntrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RelatedEntryPreviousValuesSubscription>() => T;
}

export interface Scope {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface ScopePromise extends Promise<Scope>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface ScopeSubscription
  extends Promise<AsyncIterator<Scope>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface EntryConnection {
  pageInfo: PageInfo;
  edges: EntryEdge[];
}

export interface EntryConnectionPromise
  extends Promise<EntryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EntryEdge>>() => T;
  aggregate: <T = AggregateEntryPromise>() => T;
}

export interface EntryConnectionSubscription
  extends Promise<AsyncIterator<EntryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EntryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEntrySubscription>() => T;
}

export interface AggregateEntryRelationType {
  count: Int;
}

export interface AggregateEntryRelationTypePromise
  extends Promise<AggregateEntryRelationType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEntryRelationTypeSubscription
  extends Promise<AsyncIterator<AggregateEntryRelationType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScopeEdge {
  node: Scope;
  cursor: String;
}

export interface ScopeEdgePromise extends Promise<ScopeEdge>, Fragmentable {
  node: <T = ScopePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScopeEdgeSubscription
  extends Promise<AsyncIterator<ScopeEdge>>,
    Fragmentable {
  node: <T = ScopeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Entry {
  id: ID_Output;
  title: String;
  content: String;
}

export interface EntryPromise extends Promise<Entry>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  user: <T = UserPromise>() => T;
  attributeValues: <T = FragmentableArray<EntryAttributeValue>>(args?: {
    where?: EntryAttributeValueWhereInput;
    orderBy?: EntryAttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  relatedEntriesFrom: <T = FragmentableArray<RelatedEntry>>(args?: {
    where?: RelatedEntryWhereInput;
    orderBy?: RelatedEntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  relatedEntriesTo: <T = FragmentableArray<RelatedEntry>>(args?: {
    where?: RelatedEntryWhereInput;
    orderBy?: RelatedEntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EntrySubscription
  extends Promise<AsyncIterator<Entry>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  attributeValues: <
    T = Promise<AsyncIterator<EntryAttributeValueSubscription>>
  >(args?: {
    where?: EntryAttributeValueWhereInput;
    orderBy?: EntryAttributeValueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  relatedEntriesFrom: <
    T = Promise<AsyncIterator<RelatedEntrySubscription>>
  >(args?: {
    where?: RelatedEntryWhereInput;
    orderBy?: RelatedEntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  relatedEntriesTo: <
    T = Promise<AsyncIterator<RelatedEntrySubscription>>
  >(args?: {
    where?: RelatedEntryWhereInput;
    orderBy?: RelatedEntryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Attribute",
    embedded: false
  },
  {
    name: "AttributeValue",
    embedded: false
  },
  {
    name: "Entry",
    embedded: false
  },
  {
    name: "EntryAttributeValue",
    embedded: false
  },
  {
    name: "EntryRelationType",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "RelatedEntry",
    embedded: false
  },
  {
    name: "Scope",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: process.env.PRISMA_ENDPOINT
});
export const prisma = new Prisma();
